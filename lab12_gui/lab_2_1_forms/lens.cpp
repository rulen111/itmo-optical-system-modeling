/////////////////////////////////////////////////////////////////////////////
// Прикладное программирование
// Вычисление параксиальных характеристик линзы
// Класс Линза
// lens.cpp
// 
// Ахмаров Руслан
// Университет ИТМО, B34003
/////////////////////////////////////////////////////////////////////////////
// подключение описания класса
#include "lens.h"

/////////////////////////////////////////////////////////////////////////////
// Конструктор по умолчанию
Lens::Lens() {
	m_d = 3.;
	m_n = 1.;
	m_surface1 = SphericalSurface();
	m_surface2 = SphericalSurface();
}
/////////////////////////////////////////////////////////////////////////////
// Деструктор
Lens::~Lens() {}
/////////////////////////////////////////////////////////////////////////////
// Модификатор m_n
void Lens::SetN(double n) {
	m_n = n;
}
/////////////////////////////////////////////////////////////////////////////
// Селектор m_n
double Lens::GetN() {
	return m_n;
}
/////////////////////////////////////////////////////////////////////////////
// Модификатор m_d
void Lens::SetThickness(double d) {
	m_d = d;
}
/////////////////////////////////////////////////////////////////////////////
// Селектор m_d
double Lens::GetThickness() {
	return m_d;
}
/////////////////////////////////////////////////////////////////////////////
// Модификатор m_s
void Lens::SetS(double s) {
	m_s = s;
}
/////////////////////////////////////////////////////////////////////////////
// Селектор m_s
double Lens::GetS() {
	return m_s;
}
/////////////////////////////////////////////////////////////////////////////
// Модификатор m_a
void Lens::SetA(double a) {
	m_a = a;
}
/////////////////////////////////////////////////////////////////////////////
// Селектор m_a
double Lens::GetA() {
	return m_a;
}
/////////////////////////////////////////////////////////////////////////////
// Модификатор m_s_
void Lens::SetS_(double s_) {
	m_s_ = s_;
}
/////////////////////////////////////////////////////////////////////////////
// Селектор m_s_
double Lens::GetS_() {
	return m_s_;
}
/////////////////////////////////////////////////////////////////////////////
// Модификатор m_surface1
SphericalSurface& Lens::AccessSurface1() {
	return m_surface1;
}
/////////////////////////////////////////////////////////////////////////////
// Селектор m_surface1
const SphericalSurface& Lens::GetSurface1() const {
	return m_surface1;
}
/////////////////////////////////////////////////////////////////////////////
// Модификатор m_surface2
SphericalSurface& Lens::AccessSurface2() {
	return m_surface2;
}
/////////////////////////////////////////////////////////////////////////////
// Селектор m_surface2
const SphericalSurface& Lens::GetSurface2() const {
	return m_surface2;
}
/////////////////////////////////////////////////////////////////////////////
// Формирование матрицы переноса
void Lens::GetTransferMatrix(Matrix<double>& transfer, double d, double n) {
	transfer.setValue(0, 0, 1);
	double elem = d / n;
	transfer.setValue(0, 1, elem);
	transfer.setValue(1, 0, 0);
	transfer.setValue(1, 1, 1);
}
/////////////////////////////////////////////////////////////////////////////
// Расчет параксиальных характеристик
void Lens::CalculateParaxial(Paraxial& paraxial) {
	Matrix<double> g(2, 2), r1(2, 2), r2(2, 2), t(2, 2);
	this->AccessSurface1().GetTransformMatrix(r1, 1., this->GetN());
	this->AccessSurface2().GetTransformMatrix(r2, this->GetN(), 1.);
	this->GetTransferMatrix(t, this->GetThickness(), this->GetN());

	g = (r2 * t) * r1;

	paraxial.m_F = (g(1, 1) * g(2, 2) / g(2, 1)) - g(1, 2);
	paraxial.m_F_ = -1 / g(2, 1);
	paraxial.m_SF = g(2, 2) / g(2, 1);
	paraxial.m_SF_ = -g(1, 1) / g(2, 1);
	paraxial.m_SH = paraxial.m_SF - paraxial.m_F;
	paraxial.m_SH_ = paraxial.m_SF_ - paraxial.m_F_;
}
/////////////////////////////////////////////////////////////////////////////
// Расчет заднего отрезка
void Lens::CalculateImage(Paraxial& paraxial) {
	double z = this->GetS() - paraxial.m_SF;
	double z_ = -(paraxial.m_F_ * paraxial.m_F_) / z;
	this->SetS_(paraxial.m_SF_ + z_);
}
/////////////////////////////////////////////////////////////////////////////